name: ts-proto codegen

on:
  push:
    branches: [ main ]

permissions:
  contents: read

env:
  PROTOC_VERSION: "32.0"

jobs:
  codegen:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    steps:
      - name: Checkout
        # actions/checkout v5.0.0
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      # Resolve correct protoc archive name for the current runner
      - name: Compute protoc archive name
        id: protoc-arch
        shell: bash
        run: |
          set -eu
          V="${PROTOC_VERSION}"
          OS="${{ runner.os }}"
          ARCH="${{ runner.arch }}"
          case "$OS" in
            Linux)  OS_ID="linux" ;;
            macOS)  OS_ID="osx" ;;
            *) echo "Unsupported OS: $OS" >&2; exit 1 ;;
          esac
          case "$ARCH" in
            X64)     CPU_ID="x86_64" ;;
            ARM64)   CPU_ID="aarch_64" ;;
            *) echo "Unsupported arch: $ARCH" >&2; exit 1 ;;
          esac
          FILE="protoc-${V}-${OS_ID}-${CPU_ID}.zip"
          TAG="v${V}"
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG"   >> "$GITHUB_OUTPUT"

      - name: Restore protoc cache
        id: protoc-cache
        # actions/cache v4.2.4
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ~/.protoc
          key: protoc-${{ steps.protoc-arch.outputs.tag }}-${{ steps.protoc-arch.outputs.file }}-${{ runner.os }}

      - name: Install protoc ${{ env.PROTOC_VERSION }}
        if: steps.protoc-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -eux
          mkdir -p "$HOME/.protoc"
          FILE="${{ steps.protoc-arch.outputs.file }}"
          TAG="${{ steps.protoc-arch.outputs.tag }}"
          URL="https://github.com/protocolbuffers/protobuf/releases/download/${TAG}/${FILE}"
          echo "Downloading $URL"
          curl -sSfL -o "$FILE" "$URL"
          unzip -o "$FILE" -d "$HOME/.protoc"
          rm -f "$FILE"

      - name: Add protoc to PATH and set include env
        shell: bash
        run: |
          echo "$HOME/.protoc/bin" >> "$GITHUB_PATH"
          echo "PROTOC_INCLUDE=$HOME/.protoc/include" >> "$GITHUB_ENV"
          protoc --version
          test -d "$PROTOC_INCLUDE"

      - name: Set up Node
        # actions/setup-node v4.4.0
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: "24"
          cache: "npm"

      - name: Write package.json for ts-proto
        shell: bash
        run: |
          set -eux
          cat > package.json <<'JSON'
          {
            "name": "ts-proto-deps",
            "private": true,
            "dependencies": {
              "ts-proto": "stephenh/ts-proto#65dc52fdc390c4a6a373fa3212bac58aaa480713"
            }
          }
          JSON

      - name: Install ts-proto
        shell: bash
        run: |
          set -eux
          pnpm install
          echo 'syntax="proto3";' > simple.proto
          protoc --plugin=./node_modules/.bin/protoc-gen-ts_proto --ts_proto_out=. ./simple.proto
          ls -la
